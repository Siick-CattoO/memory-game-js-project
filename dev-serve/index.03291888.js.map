{"mappings":"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","sources":["memory.js"],"sourcesContent":["\"use strict\";\nconsole.clear();\n\n//todo>     MEMORY-AUFGABEN\n\n//todo>     - Spielfeld erstellen ~~> 6x4 / 4x6\n//todo>     - Katen flippen ~~> eventListener(\"click\")\n//todo>     - Flip-Effekt   ~~> .toggle(\"div\")\n//todo>     - Paar gefunden ~~> .flipped\n//todo>     - Paar falsch ~~> .remove(\"CLASS\")\n\n//* ------------------------------------------------------------------------------- Selectors\n\n// Elemente rüberholen und ansprechen\nconst section = document.querySelector(\"section\");\nconst retryCount = document.querySelector(\"span\");\nlet retry = 8;\n\n// -------------------------------------------------\n// Text verlinken\nretryCount.textContent = retry;\n\n// -------------------------------------------------\n// Kartendaten generieren ~~~> Array mit Objekten\nconst getData = () => [\n  { imgSrc: \"./images/cat.png\", name: \"cat\" },\n  { imgSrc: \"./images/cat.png\", name: \"cat\" },\n  { imgSrc: \"./images/chameleon.png\", name: \"chameleon\" },\n  { imgSrc: \"./images/chameleon.png\", name: \"chameleon\" },\n  { imgSrc: \"./images/elephant.png\", name: \"elephant\" },\n  { imgSrc: \"./images/elephant.png\", name: \"elephant\" },\n  { imgSrc: \"./images/fox.png\", name: \"fox\" },\n  { imgSrc: \"./images/fox.png\", name: \"fox\" },\n  { imgSrc: \"./images/jellyfish.png\", name: \"jellyfish\" },\n  { imgSrc: \"./images/jellyfish.png\", name: \"jellyfish\" },\n  { imgSrc: \"./images/owl.png\", name: \"owl\" },\n  { imgSrc: \"./images/owl.png\", name: \"owl\" },\n  { imgSrc: \"./images/panda-bear.png\", name: \"panda-bear\" },\n  { imgSrc: \"./images/panda-bear.png\", name: \"panda-bear\" },\n  { imgSrc: \"./images/snail.png\", name: \"snail\" },\n  { imgSrc: \"./images/snail.png\", name: \"snail\" },\n  { imgSrc: \"./images/snake.png\", name: \"snake\" },\n  { imgSrc: \"./images/snake.png\", name: \"snake\" },\n  { imgSrc: \"./images/toucan.png\", name: \"toucan\" },\n  { imgSrc: \"./images/toucan.png\", name: \"toucan\" },\n  { imgSrc: \"./images/turtle.png\", name: \"turtle\" },\n  { imgSrc: \"./images/turtle.png\", name: \"turtle\" },\n  { imgSrc: \"./images/whale.png\", name: \"whale\" },\n  { imgSrc: \"./images/whale.png\", name: \"whale\" },\n];\n\n//! ------------------------------------------------------------------------------- Mix Cards Function\n// zufällige Anordnung der Karten // Mix Cards\nconst mixCards = () => {\n  const cardData = getData();\n  cardData.sort(() => Math.random() - 0.5);\n  return cardData;\n};\n\n//! ------------------------------------------------------------------------------- Card Generator Function\nconst cardGenerator = () => {\n  const cardData = mixCards();\n  // HTML generieren:\n  const cards = document.querySelectorAll(\".card\");\n  // Schleife erstellen, um auf jedes Objekt im Array zuzugreifen:\n  cardData.forEach((item) => {\n    const card = document.createElement(\"div\");\n    const cardFront = document.createElement(\"img\");\n    const cardBack = document.createElement(\"div\");\n    // CSS-Klassen zuweisen:\n    card.classList = \"card\";\n    cardFront.classList = \"cardFront\";\n    cardBack.classList = \"cardBack\";\n    // Information zu der Karte hinzufügen:\n    cardFront.src = item.imgSrc;\n    card.setAttribute(\"name\", item.name);\n    // Erstellte Elemente dem Parent zuweisen:\n    section.appendChild(card);\n    card.appendChild(cardFront);\n    card.appendChild(cardBack);\n\n    // \"Klick-Event\" für den eventListener:\n    card.addEventListener(\"click\", (e) => {\n      card.classList.toggle(\"toggleCard\");\n      checkCards(e);\n    });\n  });\n};\n\n//! ------------------------------------------------------------------------------- Matching Cards Function\n// Checken, ob Karten zusammenpassen:\nconst checkCards = (e) => {\n  console.log(e);\n  const clickedCard = e.target;\n  // Weitere Klasse hinzufügen zu den umgedrehten Karten\n  clickedCard.classList.add(\"flipped\");\n  // Umgedrehte Karten in neuer Variable speichern\n  const flippedCards = document.querySelectorAll(\".flipped\");\n\n  //^ ------------------------------------------------------------------ if-Statement finding pair\n  // Die \"toggle-class\" ist für die Animation, während die \"flipped-class\" checkt ob zwei Karten zusammen passen\n  // Einen Boolean ertsellen ~~~> if-statement:\n\n  if (flippedCards.length === 2) {\n    if (flippedCards[0].getAttribute(\"name\") === flippedCards[1].getAttribute(\"name\")) {\n      console.log(\"match\");\n      flippedCards.forEach((card) => {\n        // \"flipped\"-Klasse entfernen, damit die Karten aufgedeckt bleiben:\n        card.classList.remove(\"flipped\");\n        // Möglichkeit zum anklicken entfernen:\n        card.style.pointerEvents = \"none\";\n      });\n    } else {\n      console.log(\"wrong\");\n      // Mit froEach-Schleife durch jedes Objekt gehen und die \"flipped\"-Klasse entfernen: // .remove(\"class\")\n      flippedCards.forEach((card) => {\n        card.classList.remove(\"flipped\");\n        setTimeout(() => card.classList.remove(\"toggleCard\"), 1800); // calculating in milliseconds\n      });\n      retry--;\n      retryCount.textContent = retry;\n      if(retry === 0) {\n        restart()\n     }\n    }\n  }\n};\n\n//! ------------------------------------------------------------------------------- Restart Function\n\n// Alle Karten wieder umdregen und mischen //  Restart\nconst restart = () => {\n  let cardData = mixCards();\n  let fronts = document.querySelectorAll(\".cardFront\");\n  let cards = document.querySelectorAll(\".card\");\n  // Schleife für gefundene Karten-Paare erstellen ~~~> nicht mehr klickbar:\n  cardData.forEach((item, index) => {\n    // Alle Karten wieder umdrehen, wenn Game Over:\n    cards[index].classList.remove(\"toggleCard\");\n    // Alle Karten neu mischen, aber erst nachdem alle Karten wieder umgedreht sind: // setTimeout()\n    setTimeout(() => {\n    cards[index].style.pointerEvents = \"all\";\n    fronts[index].src = item.imgSrc;\n  }, 1000)\n  });\n\n  // Versuche bis Game Over\n  retry = 8;\n  retryCount.textContent = retry;\n  \n};\n\ncardGenerator();\n"],"names":[],"version":3,"file":"index.03291888.js.map","sourceRoot":"/__parcel_source_root/"}